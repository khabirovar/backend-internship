stages:
    - check variables
    - build jar
    - build image
    - push image 
 #   - build helm
 #   - push helm
 #   - deploy helm

variables:
    PROJECT_NAME: group10-back
    DOCKER_REPO: docker.trainee.ru.com
    HELM_REPO: helm-group10-front
    HELM_REPO_URL: https://repo.trainee.ru.com/repository/helm
    HELM_EXPERIMENTAL_OCI: 1


check variables:
    before_script:
        - export PROJ_VER=$(echo $(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) | cut -f 1,2,3 -d.)
        - export PROJECT_GROUP=$(echo ${CI_PROJECT_PATH} | cut -f 1 -d/)
    script:
        - echo "project version is ${PROJ_VER}"
        - echo "project group is ${PROJECT_GROUP}"
        - echo "project name is ${PROJECT_NAME}"
    stage: check variables

build jar:
    before_script:
        - export PROJ_VER=$(echo $(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) | cut -f 1,2,3 -d.)
        - export PROJECT_GROUP=$(echo ${CI_PROJECT_PATH} | cut -f 1 -d/)
    script:
        - mvn clean package -DskipTests -e
    artifacts:
        paths:
            - target/*.jar
        expire_in: 1 day
    stage: build jar
    
build image:
    before_script:
        - export PROJ_VER=$(echo $(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) | cut -f 1,2,3 -d.)
        - export PROJECT_GROUP=$(echo ${CI_PROJECT_PATH} | cut -f 1 -d/)
    script:
        - docker build -t ${DOCKER_REPO}/{PROJECT_NAME}:${PROJ_VER} .    
    stage: build image
    dependencies: [build jar]

push image:
    before_script:
        - export PROJ_VER=$(echo $(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) | cut -f 1,2,3 -d.)
        - export PROJECT_GROUP=$(echo ${CI_PROJECT_PATH} | cut -f 1 -d/)
    script:
        - docker login ${DOCKER_REPO} -u "${NEXUS_USER}" -p "${NEXUS_PASSWORD}"
        - docker push -a ${DOCKER_REPO}/${PROJECT_NAME}
        - docker rmi "${DOCKER_REPO}/${PROJECT_NAME}:${PROJ_VER}"
    stage: push image

build helm:
    before_script:
        - export PROJ_VER=$(echo $(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) | cut -f 1,2,3 -d.)
        - export PROJECT_GROUP=$(echo ${CI_PROJECT_PATH} | cut -f 1 -d/)
        - export EXPOSE_PORT=$(grep EXPOSE Dockerfile | cut -f2 -d' ')
    script:
        - helm create ${PROJECT_NAME}
        - echo "EXPOSE_PORT is ${EXPOSE_PORT}"
        - sed -i "s/EXPOSE_PORT/${EXPOSE_PORT}/g" env/values.yaml
        - sed -i "s/CI_PROJECT_NAME/${PROJECT_NAME}/g" env/values.yaml
        - sed -i "s/CI_PROJECT_NAME/${PROJECT_NAME}/g" env/service.yaml
        - sed -i "s/CI_PROJECT_NAME/${PROJECT_NAME}/g" env/deployment.yaml
        - sed -i "s/0.1.0/${PROJ_VER}/g" ${PROJECT_NAME}/Chart.yaml
        - cp env/values.yaml ${PROJECT_NAME}/values.yaml
        - cp env/service.yaml ${PROJECT_NAME}/templates/service.yaml
        - cp env/deployment.yaml ${PROJECT_NAME}/templates/deployment.yaml
        - helm repo add ${HELM_REPO} ${HELM_REPO_URL}
        - helm lint ${PROJECT_NAME}
        - helm package ${PROJECT_NAME}
    artifacts:
        paths:
            - "*.tgz"
        expire_in: 1 day
    stage: build helm

push helm:
    before_script:
        - export PROJ_VER=$(echo $(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) | cut -f 1,2,3 -d.)
        - export PROJECT_GROUP=$(echo ${CI_PROJECT_PATH} | cut -f 1 -d/)
        - export EXPOSE_PORT=$(grep EXPOSE Dockerfile | cut -f2 -d' ')
    script:
        - helm nexus-push ${HELM_REPO} ${PROJECT_NAME}-${PROJECT_VERSION}.tgz --username ${NEXUS_USER} --password ${NEXUS_PASSWORD}
    stage: push helm
    dependencies: [build helm]

deploy helm:
    before_script:
        - export PROJ_VER=$(echo $(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) | cut -f 1,2,3 -d.)
        - export PROJECT_GROUP=$(echo ${CI_PROJECT_PATH} | cut -f 1 -d/)
        - export EXPOSE_PORT=$(grep EXPOSE Dockerfile | cut -f2 -d' ')
    script:
        - helm repo add ${HELM_REPO} ${HELM_REPO_URL}
        - helm nexus-push ${HELM_REPO} login --username ${NEXUS_USER} --password ${NEXUS_PASSWORD}
        - helm repo update
        - helm uninstall ${PROJECT_NAME} --namespace ${PROJECT_GROUP}
        - helm upgrade --install ${PROJECT_NAME} --namespace ${PROJECT_GROUP} ${HELM_REPO}/${PROJECT_NAME} --wait
    stage: deploy helm
